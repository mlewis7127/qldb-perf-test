
service: qldb-perf-demo

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  tracing:
    apiGateway: true
    lambda: true 

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: false   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
  

functions:
  perfQLDBCreate:
    name: perf-qldb-create-${self:provider.stage}
    handler: functions/perf-qldb-create.handler
    events:
      - http:
          path: /qldb
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - qldb:SendCommand
        Resource: arn:aws:qldb:#{AWS::Region}:#{AWS::AccountId}:ledger/qldb-perf-demo-${self:provider.stage}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"      
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : "1"
      LEDGER_NAME : qldb-perf-demo-${self:provider.stage}

  perfQLDBGet:
    name: perf-qldb-get-${self:provider.stage}
    handler: functions/perf-qldb-get.handler
    events:
      - http:
          path: /qldb/{govid}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - qldb:SendCommand
        Resource: arn:aws:qldb:#{AWS::Region}:#{AWS::AccountId}:ledger/qldb-perf-demo-${self:provider.stage}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : "1"
      LEDGER_NAME : qldb-perf-demo-${self:provider.stage}
    

  perfDynamoDBCreate:
    name: perf-dynamodb-create-${self:provider.stage}
    handler: functions/perf-dynamodb-create.handler
    events:
      - http:
          path: /dynamodb
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          Fn::GetAtt: [DynamoDBTable, Arn]
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"  
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : "1"
      TABLE_NAME : Person-${self:provider.stage}
        

  perfDynamoDBGet:
    name: perf-dynamodb-get-${self:provider.stage}
    handler: functions/perf-dynamodb-get.handler
    events:
      - http:
          path: /dynamodb/{govid}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          Fn::GetAtt: [DynamoDBTable, Arn]
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"  
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : "1"
      TABLE_NAME : Person-${self:provider.stage}

resources:
  Resources:
    QLDBTable:
      Type: AWS::QLDB::Ledger
      Properties:
        Name: qldb-perf-demo-${self:provider.stage}
        DeletionProtection: false
        PermissionsMode: ALLOW_ALL
        Tags:
          - 
            Key: name
            Value: qldb-perf-demo

    DynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: Person-${self:provider.stage}
        AttributeDefinitions:
          -
            AttributeName: GovId
            AttributeType: S
        KeySchema:
          -
            AttributeName: GovId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
